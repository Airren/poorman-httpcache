openapi: "3.0.0"
info:
  version: 1.0.0
  title: Minimal ping API server
paths:
  /ping:
    get:
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
  
  /admin/users:
    get:
      summary: List all users
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Missing or invalid admin credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new user
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Missing or invalid admin credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/keys:
    get:
      summary: List all API keys
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          description: Unauthorized - Missing or invalid admin credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new API key
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Missing or invalid admin credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Admin-Key
      description: API key required for accessing admin endpoints
  
  schemas:
    # base types
    Pong:
      type: object
      required:
        - ping
      properties:
        ping:
          type: string
          example: pong
    
    # Error response type
    ErrorResponse:
      type: object
      required:
        - code
        - msg
        - traces
      properties:
        code:
          type: integer
          example: 400
        msg:
          type: string
          example: "Bad request"
        traces:
          type: array
          items:
            type: string
          example: ["validation failed for field 'email'", "email format is invalid"]
    
    # User schemas
    User:
      type: object
      required:
        - id
        - email
        - created_at
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
    
    CreateUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: newuser@example.com
    
    # API Key schemas
    ApiKey:
      type: object
      required:
        - id
        - user_id
        - key_string
        - status
        - has_quota
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        key_string:
          type: string
          example: "sk-1234567890abcdef"
        status:
          type: string
          example: "unassigned"
        has_quota:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
    
    CreateApiKeyRequest:
      type: object
      required:
        - email
        - has_quota
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        has_quota:
          type: boolean
          example: true
    
    CreateApiKeyResponse:
      type: object
      required:
        - api_key
        - user_email
        - service_quotas
      properties:
        api_key:
          type: string
          example: "svc-miro-api01-1234567890abcdef"
        user_email:
          type: string
          format: email
          example: "user@example.com"
        service_quotas:
          type: array
          items:
            $ref: '#/components/schemas/ServiceQuota'
    
    ServiceQuota:
      type: object
      required:
        - service_name
        - initial_quota
        - remaining_quota
      properties:
        service_name:
          type: string
          example: "translation"
        initial_quota:
          type: integer
          example: 1000
        remaining_quota:
          type: integer
          example: 1000