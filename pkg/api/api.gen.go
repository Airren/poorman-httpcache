// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	CreatedAt time.Time `json:"created_at"`
	HasQuota  bool      `json:"has_quota"`
	Id        int64     `json:"id"`
	KeyString string    `json:"key_string"`
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
	UserId    int64     `json:"user_id"`
}

// CreateApiKeyRequest defines model for CreateApiKeyRequest.
type CreateApiKeyRequest struct {
	Email    openapi_types.Email `json:"email"`
	HasQuota bool                `json:"has_quota"`
}

// CreateApiKeyResponse defines model for CreateApiKeyResponse.
type CreateApiKeyResponse struct {
	ApiKey        string              `json:"api_key"`
	ServiceQuotas []ServiceQuota      `json:"service_quotas"`
	UserEmail     openapi_types.Email `json:"user_email"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email openapi_types.Email `json:"email"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code   int      `json:"code"`
	Msg    string   `json:"msg"`
	Traces []string `json:"traces"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// ServiceQuota defines model for ServiceQuota.
type ServiceQuota struct {
	InitialQuota   int    `json:"initial_quota"`
	RemainingQuota int    `json:"remaining_quota"`
	ServiceName    string `json:"service_name"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"created_at"`
	Email     openapi_types.Email `json:"email"`
	Id        int64               `json:"id"`
}

// PostAdminKeysJSONRequestBody defines body for PostAdminKeys for application/json ContentType.
type PostAdminKeysJSONRequestBody = CreateApiKeyRequest

// PostAdminUsersJSONRequestBody defines body for PostAdminUsers for application/json ContentType.
type PostAdminUsersJSONRequestBody = CreateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API keys
	// (GET /admin/keys)
	GetAdminKeys(w http.ResponseWriter, r *http.Request)
	// Create a new API key
	// (POST /admin/keys)
	PostAdminKeys(w http.ResponseWriter, r *http.Request)
	// List all users
	// (GET /admin/users)
	GetAdminUsers(w http.ResponseWriter, r *http.Request)
	// Create a new user
	// (POST /admin/users)
	PostAdminUsers(w http.ResponseWriter, r *http.Request)

	// (GET /ping)
	GetPing(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all API keys
// (GET /admin/keys)
func (_ Unimplemented) GetAdminKeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new API key
// (POST /admin/keys)
func (_ Unimplemented) PostAdminKeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all users
// (GET /admin/users)
func (_ Unimplemented) GetAdminUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /admin/users)
func (_ Unimplemented) PostAdminUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /ping)
func (_ Unimplemented) GetPing(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAdminKeys operation middleware
func (siw *ServerInterfaceWrapper) GetAdminKeys(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminKeys operation middleware
func (siw *ServerInterfaceWrapper) PostAdminKeys(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAdminUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAdminUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAdminUsers operation middleware
func (siw *ServerInterfaceWrapper) PostAdminUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/keys", wrapper.GetAdminKeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/keys", wrapper.PostAdminKeys)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/users", wrapper.GetAdminUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/users", wrapper.PostAdminUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.GetPing)
	})

	return r
}
