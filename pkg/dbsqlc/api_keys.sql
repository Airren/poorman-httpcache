CREATE TABLE api_keys (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    key_string TEXT UNIQUE NOT NULL,
    status TEXT NOT NULL DEFAULT 'unassigned' REFERENCES api_key_statuses(name),
    has_quota BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE UNIQUE INDEX idx_api_keys_key_string ON api_keys(key_string);
CREATE INDEX idx_api_keys_user_id ON api_keys(user_id);
CREATE INDEX idx_api_keys_status ON api_keys(status);

-- API Key-related queries

-- Create service key with no quota (has_quota = false)
-- name: CreateServiceKey :one
INSERT INTO api_keys (user_id, key_string, status, has_quota)
VALUES ($1, $2, 'unassigned', FALSE)
RETURNING *;

-- Create user API key with quota (has_quota = true)
-- name: CreateUserAPIKey :one
INSERT INTO api_keys (user_id, key_string, status, has_quota)
VALUES ($1, $2, 'unassigned', TRUE)
RETURNING *;

-- Batch create API keys (for generating multiple keys at once)
-- name: BatchCreateAPIKeys :copyfrom
INSERT INTO api_keys (user_id, key_string, status, has_quota)
VALUES ($1, $2, $3, $4);

-- Find an unassigned key for a user
-- name: GetUnassignedKey :one
SELECT * FROM api_keys 
WHERE status = 'unassigned' AND user_id = $1
LIMIT 1;

-- Update API key status
-- name: UpdateAPIKeyStatus :one
UPDATE api_keys 
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING *;

-- Assign key to user (update user_id and status in one go)
-- name: AssignKeyToUser :one
UPDATE api_keys 
SET user_id = $2, status = 'assigned', updated_at = NOW()
WHERE key_string = $1 AND status = 'unassigned'
RETURNING *;

-- Get API key with user info
-- name: GetAPIKeyWithUser :one
SELECT ak.*, u.email as user_email
FROM api_keys ak
JOIN users u ON ak.user_id = u.id
WHERE ak.id = $1;

-- Get key with services for initialization workflow
-- name: GetKeyWithServicesForInitialization :many
SELECT ak.id as api_key_id, s.id as service_id
FROM api_keys ak
CROSS JOIN services s
WHERE ak.id = $1;

-- Get all API keys for a user
-- name: GetAPIKeysByUserID :many
SELECT * FROM api_keys 
WHERE user_id = $1
ORDER BY created_at DESC;

-- Get assigned API keys for a user
-- name: GetAssignedAPIKeysByUserID :many
SELECT * FROM api_keys 
WHERE user_id = $1 AND status = 'assigned'
ORDER BY created_at DESC;

-- Get all API keys
-- name: GetAllAPIKeys :many
SELECT * FROM api_keys
ORDER BY created_at DESC;

-- Get API key info by key string (for quota checking)
-- name: GetAPIKeyByKeyString :one
SELECT id, key_string,has_quota, status FROM api_keys WHERE key_string = $1;
