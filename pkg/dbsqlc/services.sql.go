// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: services.sql

package dbsqlc

import (
	"context"
)

const getAllServices = `-- name: GetAllServices :many

SELECT id, name FROM services
`

type GetAllServicesRow struct {
	ID   int64
	Name string
}

// Service-related queries
// Get all services
func (q *Queries) GetAllServices(ctx context.Context) ([]*GetAllServicesRow, error) {
	rows, err := q.db.Query(ctx, getAllServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllServicesRow
	for rows.Next() {
		var i GetAllServicesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceByName = `-- name: GetServiceByName :one
SELECT id, name, default_quota, created_at, updated_at FROM services WHERE name = $1
`

// Get service by name
func (q *Queries) GetServiceByName(ctx context.Context, name string) (*Services, error) {
	row := q.db.QueryRow(ctx, getServiceByName, name)
	var i Services
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DefaultQuota,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
