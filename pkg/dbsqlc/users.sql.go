// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package dbsqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (email)
VALUES ($1)
ON CONFLICT (email) DO NOTHING
RETURNING id, email, created_at
`

// User-related queries
// Create a new user with a given email
func (q *Queries) CreateUser(ctx context.Context, email string) (*Users, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i Users
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return &i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, created_at FROM users ORDER BY created_at DESC
`

// Get all users
func (q *Queries) GetAllUsers(ctx context.Context) ([]*Users, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(&i.ID, &i.Email, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at FROM users WHERE email = $1
`

// Get user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return &i, err
}
