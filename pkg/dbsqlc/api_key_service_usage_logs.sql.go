// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_key_service_usage_logs.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchInsertUsageLogsParams struct {
	ApiKeyID          int64
	ServiceID         int64
	ConsumptionAmount int32
	MinuteTimestamp   pgtype.Timestamptz
	CreatedAt         pgtype.Timestamptz
}

const upsertMinuteUsage = `-- name: UpsertMinuteUsage :one
INSERT INTO api_key_service_usage_logs (api_key_id, service_id, consumption_amount, minute_timestamp)
VALUES ($1, $2, $3, $4)
ON CONFLICT (api_key_id, service_id, minute_timestamp) 
DO UPDATE SET consumption_amount = api_key_service_usage_logs.consumption_amount + $3
RETURNING consumption_amount
`

type UpsertMinuteUsageParams struct {
	ApiKeyID          int64
	ServiceID         int64
	ConsumptionAmount int32
	MinuteTimestamp   pgtype.Timestamptz
}

// New queries for aggregation
func (q *Queries) UpsertMinuteUsage(ctx context.Context, arg *UpsertMinuteUsageParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertMinuteUsage,
		arg.ApiKeyID,
		arg.ServiceID,
		arg.ConsumptionAmount,
		arg.MinuteTimestamp,
	)
	var consumption_amount int32
	err := row.Scan(&consumption_amount)
	return consumption_amount, err
}
