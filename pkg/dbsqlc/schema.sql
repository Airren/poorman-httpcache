-- API Key Management System Database Schema

-- Users table
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index for performance
CREATE INDEX idx_users_email ON users(email);

-- Services table
CREATE TABLE services (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index for performance
CREATE INDEX idx_services_name ON services(name);

-- API Key Statuses reference table
CREATE TABLE api_key_statuses (
    name TEXT PRIMARY KEY,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert initial status values
INSERT INTO api_key_statuses (name, description) VALUES
('unassigned', 'Key generated but not yet assigned to user'),
('assigned', 'Key assigned to user and active'),
('exhausted', 'All quotas for this key are depleted'),
('revoked', 'Key manually revoked/suspended');

-- API Keys table
CREATE TABLE api_keys (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    key_string TEXT UNIQUE NOT NULL,
    status TEXT NOT NULL DEFAULT 'unassigned' REFERENCES api_key_statuses(name),
    has_quota BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE UNIQUE INDEX idx_api_keys_key_string ON api_keys(key_string);
CREATE INDEX idx_api_keys_user_id ON api_keys(user_id);
CREATE INDEX idx_api_keys_status ON api_keys(status);

-- API Key Service Quotas table
CREATE TABLE api_key_service_quotas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    api_key_id BIGINT NOT NULL REFERENCES api_keys(id) ON DELETE CASCADE,
    service_id BIGINT NOT NULL REFERENCES services(id) ON DELETE CASCADE,
    initial_quota INTEGER NOT NULL,
    remaining_quota INTEGER NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(api_key_id, service_id)
);

-- Indexes for performance
CREATE INDEX idx_api_key_service_quotas_api_key_id ON api_key_service_quotas(api_key_id);
CREATE INDEX idx_api_key_service_quotas_service_id ON api_key_service_quotas(service_id);

-- API Key Service Usage Logs table
CREATE TABLE api_key_service_usage_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    api_key_id BIGINT NOT NULL REFERENCES api_keys(id) ON DELETE CASCADE,
    service_id BIGINT NOT NULL REFERENCES services(id) ON DELETE CASCADE,
    consumption_amount INTEGER NOT NULL DEFAULT 1,
    remaining_quota_after INTEGER NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance and analytics
CREATE INDEX idx_usage_log_api_key_id ON api_key_service_usage_logs(api_key_id);
CREATE INDEX idx_usage_log_service_id ON api_key_service_usage_logs(service_id);
CREATE INDEX idx_usage_log_created_at ON api_key_service_usage_logs(created_at);
CREATE INDEX idx_usage_log_api_key_created ON api_key_service_usage_logs(api_key_id, created_at);

-- API Key Status Events table
CREATE TABLE api_key_status_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    api_key_id BIGINT NOT NULL REFERENCES api_keys(id) ON DELETE CASCADE,
    status TEXT NOT NULL REFERENCES api_key_statuses(name),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for timeline queries
CREATE INDEX idx_status_events_api_key_id ON api_key_status_events(api_key_id);
CREATE INDEX idx_status_events_api_key_created ON api_key_status_events(api_key_id, created_at DESC);
